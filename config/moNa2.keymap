// Define before including pointing.h to avoid redefinition warnings

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos { compatible = "zmk,combos"; };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
        };

        m_atmark: atmark {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp AT>;
        };

        m_hash: hash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp HASH>;
        };

        m_dollar: dollar {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp DOLLAR>;
        };

        m_percent: percent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp PERCENT>;
        };

        m_ampersand: ampersand {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp AMPERSAND>;
        };

        m_minus: minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS>;
        };

        m_caret: caret {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp CARET>;
        };

        m_backslash: backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp BACKSLASH>;
        };

        m_tilde: tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp TILDE>;
        };

        m_pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp PIPE>;
        };

        m_asterisk: asterisk {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp ASTERISK>;
        };

        m_plus: plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp PLUS>;
        };

        m_equal: equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp EQUAL>;
        };

        m_underscore: underscore {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp UNDERSCORE>;
        };

        m_paren: paren {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LPAR &kp RPAR &kp LEFT>;
        };

        m_bracket: bracket {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LBKT &kp RBKT &kp LEFT>;
        };

        m_brace: brace {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LBRC &kp RBRC &kp LEFT>;
        };

        m_angle: angle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp LT &kp GT &kp LEFT>;
        };

        m_dquote: dquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp DQT &kp DQT &kp LEFT>;
        };

        m_squote: squote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp SQT &kp SQT &kp LEFT>;
        };

        m_grave: grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp GRAVE &kp GRAVE &kp LEFT>;
        };

        m_jpquote: jpquote {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp LBKT &kp RBKT &kp ENTER &kp LEFT>;
        };

        m_colon: colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp COLON>;
        };

        m_semicolon: semicolon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp SEMICOLON>;
        };

        m_slash: slash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp SLASH>;
        };

        m_question: question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG2 &kp QUESTION>;
        };

        m_jp_minus: m_jp_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANG1 &kp MINUS>;
        };

        m_command_shift_ctrl: m_command_shift_ctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press>, <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp RCTRL>
                , <&macro_pause_for_release>
                , <&macro_release>, <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp RCTRL>
                ;
        };

        m_command_shift_ctrl_4: m_command_shift_ctrl_4 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press>, <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp RCTRL>
                , <&macro_tap>, <&kp NUMBER_4>
                , <&macro_release>, <&kp LEFT_COMMAND &kp LEFT_SHIFT &kp RCTRL>
                ;
        };

        m_command_plus: m_command_plus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press>, <&kp LANGUAGE_2 &kp LEFT_COMMAND>
                , <&macro_tap>, <&kp PLUS>
                , <&macro_release>, <&kp LANGUAGE_2 &kp LEFT_COMMAND>
                ;
        };

        m_command_minus: m_command_minus {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press>, <&kp LANGUAGE_2 &kp LEFT_COMMAND>
                , <&macro_tap>, <&kp MINUS>
                , <&macro_release>, <&kp LANGUAGE_2 &kp LEFT_COMMAND>
                ;
        };

        m_f24_hold: m_f24_hold {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press>, <&kp F24>
                , <&macro_pause_for_release>
                , <&macro_release>, <&kp F24>
                ;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        minus_equal_morph: minus_equal_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_minus>, <&m_equal>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        caret_tilde_morph: caret_tilde_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_caret>, <&m_tilde>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        backslash_pipe_morph: backslash_pipe_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_backslash>, <&m_pipe>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        atmark_grave_morph: atmark_grave_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_atmark>, <&m_grave>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        bracket_brace_morph: bracket_brace_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_bracket>, <&m_brace>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        semicolon_plus_morph: semicolon_plus_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_semicolon>, <&m_plus>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        colon_asterisk_morph: colon_asterisk_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_colon>, <&m_asterisk>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        slash_question_morph: slash_question_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&m_slash>, <&m_question>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q           &kp W      &kp E             &kp R  &kp T                                               &kp Y           &kp U  &kp I     &kp O  &kp P
&kp A           &kp S      &kp D             &kp F  &kp G                               &kp LEFT_ALT    &kp H           &kp J  &kp K     &kp L  &kp ENTER
&kp Z           &kp X      &kp C             &kp V  &kp B      &m_command_shift_ctrl    &kp ESCAPE      &kp N           &kp M  &mkp MB1  &mo 2  &m_jp_minus
&kp LEFT_SHIFT  &kp RCTRL  &kp LEFT_COMMAND  &mo 1  &kp SPACE  &kp F13                  &kp LANGUAGE_2  &kp LANGUAGE_1                          &m_jpquote
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        layer_1 {
            bindings = <
&kp TAB    &m_dquote        &m_hash       &m_dollar  &m_percent                                                    &m_ampersand           &m_squote   &minus_equal_morph  &caret_tilde_morph  &kp BACKSPACE
&kp RSHFT  &m_grave         &m_asterisk   &m_equal   &m_minus                               &m_atmark              &m_angle               &m_paren    &m_brace            &m_bracket          &trans
&trans     &kp EXCLAMATION  &kp QUESTION  &m_plus    &m_slash    &m_command_shift_ctrl_4    &trans                 &m_jpquote             &m_jpquote  &kp COMMA           &kp PERIOD          &backslash_pipe_morph
&trans     &trans           &trans        &trans     &trans      &trans                     &semicolon_plus_morph  &colon_asterisk_morph                                                      &m_underscore
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_2 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                     &m_command_plus  &m_command_minus  &trans  &trans     &trans
&kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0            &trans   &kp LEFT         &kp DOWN          &kp UP  &kp RIGHT  &kp RIGHT
&kp F1        &kp F2        &kp F3        &kp F7        &kp F8        &kp F9    &kp F10  &kp F11          &kp F12           &trans  &trans     &trans
&trans        &trans        &trans        &mo 3         &trans        &trans    &trans   &m_f24_hold                                           &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_3 {
            bindings = <
&bootloader  &trans  &trans  &trans  &trans                    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL
&trans       &trans  &trans  &trans  &trans            &trans  &trans        &trans        &trans        &trans      &trans
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &trans        &trans        &trans        &trans      &trans
&trans       &trans  &trans  &trans  &trans  &trans    &trans  &trans                                                &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
